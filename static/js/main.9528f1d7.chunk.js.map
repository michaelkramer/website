{"version":3,"sources":["Layout/Header.tsx","Layout/Footer.tsx","constants/routes.ts","Home/index.tsx","EmptyPage/index.tsx","EmptyPage/EmptyPage.tsx","Routes/Menu.tsx","Resume/index.tsx","Routes/index.tsx","Routes/Routes.tsx","Layout/index.tsx","Layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","location","useLocation","pathname","Footer","HOME","RESUME","RLS","SIDE","NOTES","Title","Typography","Text","Paragraph","EmptyPage","menuItems","url","ROUTES","title","component","code","filter","item","map","index","key","to","exact","MenuApp","defaultSelectedKeys","theme","Item","onClick","Routes","menuItem","Component","console","log","name","path","Layout","children","Content","className","Sider","style","color","Menu","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wdAaeA,EATA,WACb,IAAMC,EAAWC,cACjB,OACE,kBAAC,IAAOF,OAAR,KACyB,MAAtBC,EAASE,UAAoB,wCCErBC,EARA,WACb,OACE,kBAAC,IAAOA,OAAR,KACE,wC,SCLOC,EAAO,IACPC,EAAS,UACTC,EAAM,OACNC,EAAO,QACPC,EAAQ,S,SCEbC,EAA2BC,IAA3BD,MAAOE,EAAoBD,IAApBC,KAAMC,EAAcF,IAAdE,UCLNC,ECCG,WAChB,OACE,6BACE,2CCYAC,EAAwB,CAC5B,CAAEC,IAAKC,EAAOZ,KAAMa,MAAO,OAAQC,UHVpB,WACf,OACE,kBAAC,IAAD,KACE,kBAACT,EAAD,uBACA,kBAACE,EAAD,CAAMQ,MAAM,GAAZ,8CACA,kBAACP,EAAD,aACCE,EACEM,QAAO,SAACC,GAAD,MAAuB,MAAbA,EAAKN,OACtBO,KAAI,SAACD,EAAME,GACV,OACE,yBAAKC,IAAKD,GACR,kBAAC,IAAD,CAAME,GAAIJ,EAAKN,KAAMM,EAAKJ,aGDcS,OAAO,GAC3D,CAAEX,IAAKC,EAAOX,OAAQY,MAAO,SAAUC,UCjB1B,WACb,OACE,6BACE,yCDeJ,CAAEH,IAAKC,EAAOV,IAAKW,MAAO,OAC1B,CAAEF,IAAKC,EAAOT,KAAMU,MAAO,cAC3B,CAAEF,IAAKC,EAAOR,MAAOS,MAAO,SAC5B,CAAEF,IAAK,SAAUE,MAAO,QAASC,UAAWL,IAkB/Bc,EAfC,WACd,IAAM3B,EAAWC,cACjB,OACE,kBAAC,IAAD,CAAM2B,oBAAqB,CAAC5B,EAASE,UAAW2B,MAAM,SACnDf,EAAUQ,KAAI,SAACD,GAAD,OACb,kBAAC,IAAKS,KAAN,CAAWN,IAAKH,EAAKN,IAAKgB,QAASV,EAAKU,SACrCV,EAAKN,IAAM,kBAAC,IAAD,CAAMU,GAAIJ,EAAKN,KAAMM,EAAKJ,OAAgBI,EAAKJ,YE5BtDe,ECEA,WACb,OACE,kBAAC,IAAD,KACGlB,EAAUQ,KAAI,SAACW,EAAUV,GACxB,IAAMW,EAAYD,EAASf,WAAaL,EAExC,OADAsB,QAAQC,IAAIF,EAAUG,MAEpB,kBAAC,IAAD,CAAOX,MAAOO,EAASP,MAAOF,IAAKD,EAAOe,KAAML,EAASlB,KACvD,kBAACmB,EAAD,UAIN,kBAAC,IAAD,CAAOI,KAAK,KACV,kBAAC,EAAD,SClBOC,ECWS,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SACnBxC,EAAWC,cAEjB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACyB,MAAtBD,EAASE,UACR,kBAAC,IAAOuC,QAAR,CAAgBC,UAAU,OAAOF,GAEZ,MAAtBxC,EAASE,UACR,oCACE,kBAAC,IAAOyC,MAAR,CAAcC,MAAO,CAAEC,MAAO,UAC5B,kBAACC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAOL,QAAR,CAAgBC,UAAU,OAAOF,MAMzC,kBAAC,EAAD,QChBSO,MAZf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,UCCUC,QACW,cAA7BC,OAAOjD,SAASkD,UAEe,UAA7BD,OAAOjD,SAASkD,UAEhBD,OAAOjD,SAASkD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.9528f1d7.chunk.js","sourcesContent":["import React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { Layout } from \"antd\";\n\nconst Header = () => {\n  const location = useLocation();\n  return (\n    <Layout.Header>\n      {location.pathname !== \"/\" && <h3>Header</h3>}\n    </Layout.Header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Layout } from \"antd\";\nconst Footer = () => {\n  return (\n    <Layout.Footer>\n      <h3>Footer</h3>\n    </Layout.Footer>\n  );\n};\n\nexport default Footer;\n","export const HOME = \"/\";\nexport const RESUME = \"/resume\";\nexport const RLS = \"/rls\";\nexport const SIDE = \"/side\";\nexport const NOTES = \"/notes\";\n","import React from \"react\";\nimport { Typography } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nimport { menuItems } from \"../Routes\";\n\nconst { Title, Text, Paragraph } = Typography;\n\nconst HomePage = () => {\n  return (\n    <Typography>\n      <Title>Michael Kramer</Title>\n      <Text code={true}>Simple website to display what I have done</Text>\n      <Paragraph>Home</Paragraph>\n      {menuItems\n        .filter((item) => item.url !== \"/\")\n        .map((item, index) => {\n          return (\n            <div key={index}>\n              <Link to={item.url}>{item.title}</Link>\n            </div>\n          );\n        })}\n    </Typography>\n  );\n};\n\nexport default HomePage;\n","import EmptyPage from \"./EmptyPage\";\nexport default EmptyPage;\n","import React from \"react\";\n\nconst EmptyPage = () => {\n  return (\n    <div>\n      <h3>EmptyPage</h3>\n    </div>\n  );\n};\n\nexport default EmptyPage;\n","import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { Menu } from \"antd\";\nimport { ROUTES } from \"../constants\";\n\nimport Home from \"../Home\";\nimport Resume from \"../Resume\";\nimport EmptyPage from \"../EmptyPage\";\ninterface MenuItem {\n  url: string;\n  title: string;\n  exact?: boolean;\n  icon?: string;\n  onClick?: any;\n  component?: () => JSX.Element;\n}\n\nconst menuItems: MenuItem[] = [\n  { url: ROUTES.HOME, title: \"Home\", component: Home, exact: true },\n  { url: ROUTES.RESUME, title: \"Resume\", component: Resume },\n  { url: ROUTES.RLS, title: \"Rls\" },\n  { url: ROUTES.SIDE, title: \"Side ideas\" },\n  { url: ROUTES.NOTES, title: \"Notes\" },\n  { url: \"/empty\", title: \"Empty\", component: EmptyPage },\n];\n\nconst MenuApp = () => {\n  const location = useLocation();\n  return (\n    <Menu defaultSelectedKeys={[location.pathname]} theme=\"light\">\n      {menuItems.map((item: MenuItem) => (\n        <Menu.Item key={item.url} onClick={item.onClick}>\n          {item.url ? <Link to={item.url}>{item.title}</Link> : item.title}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n};\n\nexport { menuItems };\n\nexport default MenuApp;\n","import React from \"react\";\n\nconst Resume = () => {\n  return (\n    <div>\n      <h3>Resume</h3>\n    </div>\n  );\n};\n\nexport default Resume;\n","import Menu, { menuItems } from \"./Menu\";\nimport Routes from \"./Routes\";\n\nexport { menuItems, Menu };\nexport default Routes;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport EmptyPage from \"../EmptyPage\";\nimport { menuItems } from \"./Menu\";\n\nconst Routes = () => {\n  return (\n    <Switch>\n      {menuItems.map((menuItem, index) => {\n        const Component = menuItem.component || EmptyPage;\n        console.log(Component.name);\n        return (\n          <Route exact={menuItem.exact} key={index} path={menuItem.url}>\n            <Component />\n          </Route>\n        );\n      })}\n      <Route path=\"*\">\n        <EmptyPage />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import Layout from \"./Layout\";\nexport default Layout;\n","import React from \"react\";\nimport { Layout } from \"antd\";\nimport { useLocation } from \"react-router-dom\";\n\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport { Menu } from \"../Routes\";\n\ninterface $Props {\n  children: any;\n}\n\nconst LayoutComponent = ({ children }: $Props) => {\n  const location = useLocation();\n\n  return (\n    <Layout>\n      <Header />\n      <Layout>\n        {location.pathname === \"/\" && (\n          <Layout.Content className=\"App\">{children}</Layout.Content>\n        )}\n        {location.pathname !== \"/\" && (\n          <>\n            <Layout.Sider style={{ color: \"white\" }}>\n              <Menu />\n            </Layout.Sider>\n            <Layout>\n              <Layout.Content className=\"App\">{children}</Layout.Content>\n            </Layout>\n          </>\n        )}\n      </Layout>\n\n      <Footer />\n    </Layout>\n  );\n};\n\nexport default LayoutComponent;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./App.less\";\nimport Layout from \"./Layout\";\nimport Routes from \"./Routes\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Layout>\n          <Routes />\n        </Layout>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}